---
title: "Decomposing growth rates into their components"
author: "Franz X. Mohr"
date: '2019-07-08'
slug: "decomposing-growth-rates"
tags:
  - r
---



<!--more-->

If you have already had the pleasure of an introductory lecture in macroeconomics, you have probably heared that a country's GDP consists of four components: private consumption, private investment, government expenditures and net exports.

```{r data, message=FALSE}
# Load libraries
library(alfred)
library(dplyr)
library(ggplot2)
library(tidyr)

# Obtain series
y <- get_fred_series("GDPCA", "GDP")
i <- get_fred_series("GPDICA", "Private investment")
c <- get_fred_series("PCECA", "Private consumption")
g <- get_fred_series("GCECA", "Public sector")
nx <- get_fred_series("A019RX1A020NBEA", "Net exports")

# Combine series
data <- full_join(y, i, by = "date") %>%
  full_join(c, by = "date") %>%
  full_join(g, by = "date") %>%
  full_join(nx, by = "date") %>%
  rename(Year = date) %>% # Rename date colum
  gather(key = "variable", value = "value", -Year) %>% # Transform into long form
  filter(Year >= "1999-01-01") %>% # Filter for year > 1999
  arrange(Year) # Arrange data
```

Since $Y_t = C_t + I_t + G_t + NX_t$ also means that $\Delta Y_t = \Delta C_t + \Delta I_t + \Delta G_t + \Delta NX_t$ with $\Delta x_t = x_t - x_{t - 1}$, the growth rate of GDP $\dfrac{\Delta Y_t}{Y_{t - 1}}$ can be decomposed in the following way

$$ \dfrac{\Delta Y_t}{Y_{t - 1}} = \dfrac{\Delta C_t}{Y_{t - 1}} + \dfrac{\Delta I_t}{Y_{t - 1}} + \dfrac{\Delta G_t}{Y_{t - 1}} + \dfrac{\Delta NX_t}{Y_{t - 1}}.$$

The remaining challenge is to translate this formula into R.

```{r calculation}
# Extract GDP as denominator
gdp <- data %>%
  filter(variable == "GDP") %>%
  select(-variable) %>%
  rename(GDP = value)

# Extract components for the numerator
comp <- data %>%
  filter(variable != "GDP") %>%
  left_join(gdp, by = "Year") %>% # Add GDP as a separate column
  group_by(variable) %>% # Group for each variable in column "variable"
  mutate(growth = (value - lag(value)) / lag(GDP)) %>% # Calculate each term
  ungroup() %>%
  filter(!is.na(growth)) %>%
  # Use factor to have the right variable order in the ggplot
  mutate(variable = factor(variable, levels = c("Private consumption",
                                                "Private investment",
                                                "Public sector",
                                                "Net exports")))
```

Plotting is done in a straightforward manner. The extra commands are only for aestetic purposes.

```{r plot}
ggplot(comp, aes(x = Year, y = growth)) +
  geom_col(aes(fill = variable)) +
  scale_x_date(expand = c(.01, 0), date_breaks = "1 year", date_labels = "%Y") +
  scale_y_continuous(labels = scales::percent_format(accuracy = .1)) +
  guides(fill = guide_legend(nrow = 2)) +
  theme_bw() +
  theme(legend.position = "bottom", # Place legend at the bottom
        legend.title = element_blank(), # No title for the legend
        axis.title = element_blank(), # No axis titles
        axis.text.x = element_text(angle = 90, vjust = .5)) + # Turn x-axis text by 90 degrees and ajust its position
  labs(title = "Composition of US real GDP growth",
       subtitle = "Percent",
       caption = "Source: U.S. Bureau of Economic Analysis.")
```

Going one step further, we can add the overal growth rate of the economy as a line to the plot:

```{r plot_incl_line}
# Calculate overal GDP growth rates
gdp <- gdp %>%
  mutate(gdp_growth = GDP / lag(GDP) - 1) %>%
  select(Year, gdp_growth)

# Combine with data
comp <- comp %>%
  left_join(gdp, by = "Year")

# Plot
ggplot(comp, aes(x = Year)) +
  geom_col(aes(y = growth, fill = variable)) +
  geom_line(aes(y = gdp_growth)) +
  scale_x_date(expand = c(.01, 0), date_breaks = "1 year", date_labels = "%Y") +
  scale_y_continuous(labels = scales::percent_format(accuracy = .1)) +
  guides(fill = guide_legend(nrow = 2)) +
  theme_bw() +
  theme(legend.position = "bottom", # Place legend at the bottom
        legend.title = element_blank(), # No title for the legend
        axis.title = element_blank(), # No axis titles
        axis.text.x = element_text(angle = 90, vjust = .5)) + # Turn x-axis text by 90 degrees and ajust its position
  labs(title = "Composition of US real GDP growth",
       subtitle = "Percent",
       caption = "Source: U.S. Bureau of Economic Analysis.")
```

